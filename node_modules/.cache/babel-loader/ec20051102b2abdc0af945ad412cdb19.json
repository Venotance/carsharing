{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\React\\\\new folder\\\\1\\\\carsharing\\\\src\\\\components\\\\Content\\\\OrderPage\\\\Location\\\\Location.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ob from './Location.module.css';\nimport { useState } from 'react';\nimport Map from './img/map.jpg';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Location = props => {\n  _s();\n\n  let location1 = props.location1 == '' ? '' : props.location1 == ''.substring(0, 1);\n  const [value1, setValue1] = useState(location1);\n  const [value2, setValue2] = useState(null);\n  let inputValue1 = '';\n  const [inputValue2, setInputValue2] = useState('');\n  const {\n    updateCounter1\n  } = props; // const [inputValue1, setInputValue1] = useState('');\n\n  let adress = [{\n    city: \"Ульяновск\",\n    point: [\"Карла Маркса, 13А\", \"Скочилова, 2\", \"Пионерская, 12/21\", \"Заречная, 9А\"]\n  }, {\n    city: \"Саранск\",\n    point: [\"просп. Российской Армии, 2/2\", \"Коммунистическая, 36\", \"Васенко, 8\", \"Ульянова, 22А\"]\n  }, {\n    city: \"Пермь\",\n    point: [\"Екатерининская, 105\", \"Карпинского, 25\", \"Борцов, 167\", \"Лядовская, 108А\"]\n  }, {\n    city: \"Астрахань\",\n    point: [\"Свердлова, 12\", \"Савушкина, 51А\", \"Минусинская, 2А\", \"Ленинградский, 9А\"]\n  }];\n  let location = {\n    value1,\n    value2\n  };\n  let arrCities = adress.map(el => el.city);\n\n  let arrPoints = () => {\n    let points = [];\n    let cityValue = adress.map(el => {\n      if (value1 == el.city) return points = el.point;\n    });\n    return points;\n  }; // let arrPoints = adress.map((el) => el.city)\n\n\n  let inputEQ = eq => {\n    if (eq == \"Город\") {\n      return arrCities;\n    } else if (eq == \"Пункт\") {\n      return arrPoints();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: ob.geolocation,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: ob.select_adress,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: ob.city_line,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0413\\u043E\\u0440\\u043E\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          onInputChange: (event, newInputValue1) => {\n            setInputValue2('');\n            setValue2(null);\n          },\n          onChange: (event, newValue1) => {\n            setValue1(newValue1); // props.updateData(newValue1,null)\n            // props.updateData(value1,null)\n            // console.log(value1,null)\n          } // click={props.updateData(value1,value2)}\n          ,\n          click: updateCounter1(`${value1 == null ? '' : `${value1}, `}${value2 == null ? '' : value2}`),\n          id: \"combo-box-demo\",\n          options: inputEQ(\"Город\"),\n          getOptionLabel: option => option,\n          style: {\n            width: 224,\n            height: 25\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"standard\",\n            placeholder: \"\\u041D\\u0430\\u0447\\u043D\\u0438\\u0442\\u0435 \\u0432\\u0432\\u043E\\u0434\\u0438\\u0442\\u044C \\u0433\\u043E\\u0440\\u043E\\u0434 ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: ob.point_line,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u0443\\u043D\\u043A\\u0442 \\u0432\\u044B\\u0434\\u0430\\u0447\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          onChange: (event, newValue2) => {\n            setValue2(newValue2);\n          },\n          inputValue: value2 == null ? '' : inputValue2,\n          onInputChange: (event, newInputValue2) => {\n            value1 == null ? setInputValue2('') : setInputValue2(newInputValue2);\n          },\n          id: \"combo-box-demo\",\n          options: inputEQ(\"Пункт\"),\n          getOptionLabel: option => option,\n          style: {\n            width: 224,\n            height: 25\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"standard\",\n            placeholder: \"\\u041D\\u0430\\u0447\\u043D\\u0438\\u0442\\u0435 \\u0432\\u0432\\u043E\\u0434\\u0438\\u0442\\u044C \\u043F\\u0443\\u043D\\u043A\\u0442 ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: ob.map,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0435:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Map,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Location, \"4tnL/yYABuwEfpYjw8AR21VWUTc=\");\n\n_c = Location;\nexport default Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["D:/Program Files (x86)/React/new folder/1/carsharing/src/components/Content/OrderPage/Location/Location.jsx"],"names":["React","ob","useState","Map","TextField","Autocomplete","Location","props","location1","substring","value1","setValue1","value2","setValue2","inputValue1","inputValue2","setInputValue2","updateCounter1","adress","city","point","location","arrCities","map","el","arrPoints","points","cityValue","inputEQ","eq","geolocation","select_adress","city_line","event","newInputValue1","newValue1","option","width","height","params","point_line","newValue2","newInputValue2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ob from './Location.module.css'\r\nimport { useState } from 'react';\r\nimport Map from './img/map.jpg';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst Location = (props) => {\r\n    let location1 = (\r\n        (props.location1=='') ? '' : props.location1==''.substring(0, 1)\r\n        );\r\n\r\n    const [value1, setValue1] = useState(location1);\r\n    const [value2, setValue2] = useState(null);\r\n    let inputValue1 = '';\r\n    const [inputValue2, setInputValue2] = useState('');\r\n    const {updateCounter1} = props;\r\n    // const [inputValue1, setInputValue1] = useState('');\r\n\r\n    let adress = [\r\n        {\r\n            city: \"Ульяновск\", point: [\"Карла Маркса, 13А\",\r\n                \"Скочилова, 2\",\r\n                \"Пионерская, 12/21\",\r\n                \"Заречная, 9А\"]\r\n        },\r\n        {\r\n            city: \"Саранск\", point: [\"просп. Российской Армии, 2/2\",\r\n                \"Коммунистическая, 36\",\r\n                \"Васенко, 8\",\r\n                \"Ульянова, 22А\"]\r\n        },\r\n        {\r\n            city: \"Пермь\", point: [\"Екатерининская, 105\",\r\n                \"Карпинского, 25\",\r\n                \"Борцов, 167\",\r\n                \"Лядовская, 108А\"]\r\n        },\r\n        {\r\n            city: \"Астрахань\", point: [\"Свердлова, 12\",\r\n                \"Савушкина, 51А\",\r\n                \"Минусинская, 2А\",\r\n                \"Ленинградский, 9А\"]\r\n        },\r\n    ]\r\n\r\n    let location = { value1, value2 }\r\n\r\n\r\n    let arrCities = adress.map((el) => el.city)\r\n    let arrPoints = () => {\r\n        let points = []\r\n        let cityValue = adress.map((el) => {\r\n            if (value1 == el.city)\r\n                return points = el.point\r\n        })\r\n        return points;\r\n    }\r\n    // let arrPoints = adress.map((el) => el.city)\r\n\r\n    let inputEQ = (eq) => {\r\n        if (eq == \"Город\") {\r\n            return arrCities\r\n        }\r\n        else if (eq == \"Пункт\") {\r\n            return arrPoints()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={ob.geolocation}>\r\n            <div className={ob.select_adress}>\r\n                <div className={ob.city_line}>\r\n                    <div><p>Город</p></div>\r\n                    <Autocomplete\r\n                        onInputChange={(event, newInputValue1) => {\r\n                            setInputValue2('');\r\n                            setValue2(null);\r\n                        }}\r\n                        onChange={(event, newValue1) => {\r\n                            setValue1(newValue1);\r\n                            // props.updateData(newValue1,null)\r\n                            // props.updateData(value1,null)\r\n                            // console.log(value1,null)\r\n                        }}\r\n                        // click={props.updateData(value1,value2)}\r\n                        click={\r\n                            updateCounter1(`${(value1==null)? '' : (`${value1}, `)}${(value2==null)? '' : value2}`)\r\n                        }\r\n                        id=\"combo-box-demo\"\r\n                        options={inputEQ(\"Город\")}\r\n                        getOptionLabel={(option) => option}\r\n                        style={{ width: 224, height: 25 }}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" placeholder=\"Начните вводить город ...\" />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className={ob.point_line}>\r\n                    <div><p>Пункт выдачи</p></div>\r\n                    <Autocomplete\r\n                        onChange={(event, newValue2) => {\r\n                            setValue2(newValue2);\r\n                        }}\r\n                        inputValue={(value2 == null) ? '' : inputValue2}\r\n                        onInputChange={(event, newInputValue2) => {\r\n                            (value1 == null) ? setInputValue2('') : setInputValue2(newInputValue2);\r\n                        }}\r\n                        id=\"combo-box-demo\"\r\n                        options={inputEQ(\"Пункт\")}\r\n                        getOptionLabel={(option) => option}\r\n                        style={{ width: 224, height: 25 }}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" placeholder=\"Начните вводить пункт ...\" />\r\n                        )}\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n            <div className={ob.map}>\r\n                <p>Выбрать на карте:</p>\r\n                <img src={Map} alt=\"\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location;"]},"metadata":{},"sourceType":"module"}