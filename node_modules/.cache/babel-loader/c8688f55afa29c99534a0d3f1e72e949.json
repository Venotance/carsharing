{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files (x86)\\\\React\\\\new folder\\\\1\\\\carsharing\\\\src\\\\components\\\\Content\\\\OrderPage\\\\Autocomplete.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import ob from './Autocomplete.module.css'\n// export class Autocomplete extends Component {\n//   static propTypes = {\n//     options: PropTypes.instanceOf(Array).isRequired\n//   };\n//   state = {\n//     activeOption: 0,\n//     filteredOptions: [],\n//     showOptions: false,\n//     userInput: ''\n//   };\n//   onChange = (e) => {\n//     console.log('onChanges');\n//     const { options } = this.props;\n//     const userInput = e.currentTarget.value;\n//     const filteredOptions = options.filter(\n//       (optionName) =>\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n//     );\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions,\n//       showOptions: true,\n//       userInput: e.currentTarget.value\n//     });\n//   };\n//   onClick = (e) => {\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions: [],\n//       showOptions: false,\n//       userInput: e.currentTarget.innerText\n//     });\n//     this.props.updateData(e.currentTarget.innerText)\n//   };\n//   onKeyDown = (e) => {\n//     const { activeOption, filteredOptions } = this.state;\n//     if (e.keyCode === 13) {\n//       this.setState({\n//         activeOption: 0,\n//         showOptions: false,\n//         userInput: filteredOptions[activeOption]\n//       });\n//       this.props.updateData(this.state.filteredOptions[activeOption])\n//     } else if (e.keyCode === 38) {\n//       if (activeOption === 0) {\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption - 1 });\n//     } else if (e.keyCode === 40) {\n//       if (activeOption === filteredOptions.length - 1) {\n//         console.log(activeOption);\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption + 1 });\n//     }\n//   };\n//   render() {\n//     const {\n//       onChange,\n//       onClick,\n//       onKeyDown,\n//       state: { activeOption, filteredOptions, showOptions, userInput }\n//     } = this;\n//     let optionList;\n//     if (showOptions && userInput) {\n//       if (filteredOptions.length) {\n//         optionList = (\n//           <ul className={ob.options}>\n//             {filteredOptions.map((optionName, index) => {\n//               let className;\n//               if (index === activeOption) {\n//                 className = ob.option_active;\n//               }\n//               return (\n//                 <li className={className} key={optionName} onClick={onClick}>\n//                   {optionName}\n//                 </li>\n//               );\n//             })}\n//           </ul>\n//         );\n//       } else {\n//         optionList = (\n//           <div className={ob.no_options}>\n//             <em>Отсутствует в списке  :(</em>\n//           </div>\n//         );\n//       }\n//     }\n//     return (\n//       <React.Fragment>\n//         <div className=\"search\">\n//           <input\n//             type=\"search\"\n//             placeholder={this.props.placehold}\n//             className={ob.input}\n//             onChange={onChange}\n//             onKeyDown={onKeyDown}\n//             value={userInput}\n//           />\n//         </div>\n//         {optionList}\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default Autocomplete;\nimport ReactDOM from 'react-dom';\nimport React, { useState, useEffect } from 'react'; // данные для примера, которые вообще-то должны браться из базы данных, например.\n// содержат список категории и моделей\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  id: 1,\n  name: 'Легковые',\n  models: [{\n    id: 1,\n    name: 'Alfa Romeo'\n  }, {\n    id: 2,\n    name: 'Aston Martin'\n  }, {\n    id: 3,\n    name: 'Aston Martin'\n  }, {\n    id: 4,\n    name: 'Bentley'\n  }]\n}, {\n  id: 2,\n  name: 'Грузовые',\n  models: [{\n    id: 1,\n    name: 'КамАЗ'\n  }, {\n    id: 2,\n    name: 'ГАЗ'\n  }, {\n    id: 3,\n    name: 'ЗИЛ'\n  }, {\n    id: 4,\n    name: 'УРАЛ'\n  }]\n}]; // компонент пользовательского выпадающего списка\n\nconst CustomSelect = ({\n  id,\n  options,\n  onChange\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"custom-select\",\n    id: id,\n    onChange: onChange,\n    children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option.id,\n      children: option.name\n    }, id + index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}; // главный компонент приложения\n\n\n_c = CustomSelect;\n\nconst Autocomplete = () => {\n  _s();\n\n  const [categories, setCategories] = useState([]); // хранилище категорий\n\n  const [models, setModels] = useState([]); // хранилище моделей\n  // при первой загрузке приложения выполнится код ниже\n\n  useEffect(() => {\n    // устанавливаем категории\n    setCategories(data.legnth > 0 && data); // и модели из первой категории по умолчанию\n\n    setModels(data.length > 0 && data[0].models && data[0].models.length > 0);\n  }, []); // при выборе нового значения в категории\n\n  const onCategoriesSelectChange = e => {\n    // преобразуем выбранное значение опции списка в число - идентификатор категории\n    const categoryId = parseInt(e.target.options[e.target.selectedIndex].value); // получаем из массива категорий объект категрии по соответствующему идентификатору\n\n    const category = categories.find(item => item.id === categoryId); // выбираем все модели в категории, если таковые есть\n\n    const models = category.models && category.models.length > 0 ? category.models : [{\n      id: 0,\n      name: 'Нет моделей',\n      items: []\n    }]; // меняем модели во втором списке\n\n    setModels(models);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"category\",\n          children: \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          id: \"category\",\n          options: categories,\n          onChange: onCategoriesSelectChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"model\",\n          children: \"\\u041C\\u0430\\u0440\\u043A\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          id: \"model\",\n          options: models\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Autocomplete, \"gn5SSfsyBWwWUM/7A+l0RPUbjGA=\");\n\n_c2 = Autocomplete;\nexport default Autocomplete;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomSelect\");\n$RefreshReg$(_c2, \"Autocomplete\");","map":{"version":3,"sources":["D:/Program Files (x86)/React/new folder/1/carsharing/src/components/Content/OrderPage/Autocomplete.jsx"],"names":["ReactDOM","React","useState","useEffect","data","id","name","models","CustomSelect","options","onChange","map","option","index","Autocomplete","categories","setCategories","setModels","legnth","length","onCategoriesSelectChange","e","categoryId","parseInt","target","selectedIndex","value","category","find","item","items"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC,C,CAEA;AACA;;;AACA,MAAMC,IAAI,GAAG,CACT;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,MAAM,EAAE,CACJ;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GADI,EAKJ;AACID,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GALI,EASJ;AACID,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GATI,EAaJ;AACID,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GAbI;AAHZ,CADS,EAuBT;AACID,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,MAAM,EAAE,CACJ;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GADI,EAKJ;AACID,IAAAA,EAAE,EAAE,CADR;AAEIC,I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","sourcesContent":["// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import ob from './Autocomplete.module.css'\r\n\r\n// export class Autocomplete extends Component {\r\n//   static propTypes = {\r\n//     options: PropTypes.instanceOf(Array).isRequired\r\n//   };\r\n//   state = {\r\n//     activeOption: 0,\r\n//     filteredOptions: [],\r\n//     showOptions: false,\r\n//     userInput: ''\r\n//   };\r\n\r\n  \r\n\r\n//   onChange = (e) => {\r\n//     console.log('onChanges');\r\n\r\n//     const { options } = this.props;\r\n//     const userInput = e.currentTarget.value;\r\n\r\n//     const filteredOptions = options.filter(\r\n//       (optionName) =>\r\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n//     );\r\n\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions,\r\n//       showOptions: true,\r\n//       userInput: e.currentTarget.value\r\n//     });\r\n//   };\r\n\r\n//   onClick = (e) => {\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions: [],\r\n//       showOptions: false,\r\n//       userInput: e.currentTarget.innerText\r\n//     });\r\n//     this.props.updateData(e.currentTarget.innerText)\r\n//   };\r\n//   onKeyDown = (e) => {\r\n//     const { activeOption, filteredOptions } = this.state;\r\n\r\n//     if (e.keyCode === 13) {\r\n//       this.setState({\r\n//         activeOption: 0,\r\n//         showOptions: false,\r\n//         userInput: filteredOptions[activeOption]\r\n//       });\r\n//       this.props.updateData(this.state.filteredOptions[activeOption])\r\n//     } else if (e.keyCode === 38) {\r\n//       if (activeOption === 0) {\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption - 1 });\r\n//     } else if (e.keyCode === 40) {\r\n//       if (activeOption === filteredOptions.length - 1) {\r\n//         console.log(activeOption);\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption + 1 });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const {\r\n//       onChange,\r\n//       onClick,\r\n//       onKeyDown,\r\n\r\n//       state: { activeOption, filteredOptions, showOptions, userInput }\r\n//     } = this;\r\n//     let optionList;\r\n//     if (showOptions && userInput) {\r\n//       if (filteredOptions.length) {\r\n//         optionList = (\r\n//           <ul className={ob.options}>\r\n//             {filteredOptions.map((optionName, index) => {\r\n//               let className;\r\n//               if (index === activeOption) {\r\n\r\n//                 className = ob.option_active;\r\n//               }\r\n//               return (\r\n//                 <li className={className} key={optionName} onClick={onClick}>\r\n//                   {optionName}\r\n//                 </li>\r\n//               );\r\n//             })}\r\n//           </ul>\r\n//         );\r\n//       } else {\r\n//         optionList = (\r\n//           <div className={ob.no_options}>\r\n//             <em>Отсутствует в списке  :(</em>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n//     return (\r\n//       <React.Fragment>\r\n//         <div className=\"search\">\r\n//           <input\r\n//             type=\"search\"\r\n//             placeholder={this.props.placehold}\r\n//             className={ob.input}\r\n//             onChange={onChange}\r\n//             onKeyDown={onKeyDown}\r\n//             value={userInput}\r\n//           />\r\n//         </div>\r\n//         {optionList}\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Autocomplete;\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n// данные для примера, которые вообще-то должны браться из базы данных, например.\r\n// содержат список категории и моделей\r\nconst data = [\r\n    {\r\n        id: 1,\r\n        name: 'Легковые',\r\n        models: [\r\n            {\r\n                id: 1,\r\n                name: 'Alfa Romeo'\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Aston Martin',\r\n            },\r\n            {\r\n                id: 3,\r\n                name: 'Aston Martin',\r\n            },\r\n            {\r\n                id: 4,\r\n                name: 'Bentley',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Грузовые',\r\n        models: [\r\n            {\r\n                id: 1,\r\n                name: 'КамАЗ',\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'ГАЗ',\r\n            },\r\n            {\r\n                id: 3,\r\n                name: 'ЗИЛ',\r\n            },\r\n            {\r\n                id: 4,\r\n                name: 'УРАЛ',\r\n            },\r\n        ]\r\n    }\r\n];\r\n\r\n\r\n// компонент пользовательского выпадающего списка\r\nconst CustomSelect = ({ id, options, onChange }) => {\r\n    return (\r\n        <select className=\"custom-select\" id={id} onChange={onChange}>\r\n            { options.map((option, index) =>\r\n                <option key={id + index} value={option.id}>{option.name}</option>\r\n            ) }\r\n        </select>\r\n    )\r\n}\r\n\r\n\r\n// главный компонент приложения\r\nconst Autocomplete = () => {\r\n\r\n    const [ categories, setCategories ] = useState([]); // хранилище категорий\r\n    const [ models, setModels ] = useState([]);         // хранилище моделей\r\n\r\n\r\n    // при первой загрузке приложения выполнится код ниже\r\n    useEffect(() => {\r\n\r\n        // устанавливаем категории\r\n        setCategories(data.legnth > 0 && data);\r\n\r\n        // и модели из первой категории по умолчанию\r\n        setModels(data.length > 0 && data[0].models && data[0].models.length > 0);\r\n\r\n    }, []);\r\n\r\n\r\n    // при выборе нового значения в категории\r\n    const onCategoriesSelectChange = (e) => {\r\n\r\n        // преобразуем выбранное значение опции списка в число - идентификатор категории\r\n        const categoryId = parseInt(e.target.options[e.target.selectedIndex].value);\r\n\r\n        // получаем из массива категорий объект категрии по соответствующему идентификатору\r\n        const category = categories.find(item => item.id === categoryId);\r\n\r\n        // выбираем все модели в категории, если таковые есть\r\n        const models = category.models && category.models.length > 0\r\n            ? category.models\r\n            : [{ id: 0, name: 'Нет моделей', items: [] }];\r\n\r\n        // меняем модели во втором списке\r\n        setModels(models);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n\r\n            <div className=\"row\">\r\n            <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"category\">Категории</label>\r\n                <CustomSelect id=\"category\" options={categories} onChange={onCategoriesSelectChange}/>\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"model\">Марки</label>\r\n                <CustomSelect id=\"model\" options={models}/>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}