{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Venotance\\\\react\\\\new folder\\\\1\\\\carsharing\\\\src\\\\components\\\\Content\\\\OrderPage\\\\Autocomplete.jsx\";\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import './style.css'\n// export class Autocomplete extends Component {\n//   static propTypes = {\n//     options: PropTypes.instanceOf(Array).isRequired\n//   };\n//   state = {\n//     activeOption: 0,\n//     filteredOptions: [],\n//     showOptions: false,\n//     userInput: ''\n//   };\n//   onChange = (e) => {\n//     console.log('onChanges');\n//     const { options } = this.props;\n//     const userInput = e.currentTarget.value;\n//     const filteredOptions = options.filter(\n//       (optionName) =>\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n//     );\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions,\n//       showOptions: true,\n//       userInput: e.currentTarget.value\n//     });\n//   };\n//   onClick = (e) => {\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions: [],\n//       showOptions: false,\n//       userInput: e.currentTarget.innerText\n//     });\n//   };\n//   onKeyDown = (e) => {\n//     const { activeOption, filteredOptions } = this.state;\n//     if (e.keyCode === 13) {\n//       this.setState({\n//         activeOption: 0,\n//         showOptions: false,\n//         userInput: filteredOptions[activeOption]\n//       });\n//     } else if (e.keyCode === 38) {\n//       if (activeOption === 0) {\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption - 1 });\n//     } else if (e.keyCode === 40) {\n//       if (activeOption === filteredOptions.length - 1) {\n//         console.log(activeOption);\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption + 1 });\n//     }\n//   };\n//   render() {\n//     const {\n//       onChange,\n//       onClick,\n//       onKeyDown,\n//       state: { activeOption, filteredOptions, showOptions, userInput }\n//     } = this;\n//     let optionList;\n//     if (showOptions && userInput) {\n//       if (filteredOptions.length) {\n//         optionList = (\n//           <ul className=\"options\">\n//             {filteredOptions.map((optionName, index) => {\n//               let className;\n//               if (index === activeOption) {\n//                 className = 'option-active';\n//               }\n//               return (\n//                 <li className={className} key={optionName} onClick={onClick}>\n//                   {optionName}\n//                 </li>\n//               );\n//             })}\n//           </ul>\n//         );\n//       } else {\n//         optionList = (\n//           <div className=\"no-options\">\n//             <em>No Option!</em>\n//           </div>\n//         );\n//       }\n//     }\n//     return (\n//       <React.Fragment>\n//         <div className=\"search\">\n//           <input\n//             type=\"text\"\n//             className=\"search-box\"\n//             onChange={onChange}\n//             onKeyDown={onKeyDown}\n//             value={userInput}\n//           />\n//           <input type=\"submit\" value=\"\" className=\"search-btn\" />\n//         </div>\n//         {optionList}\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default Autocomplete;\nimport React, { Component, Fragment } from \"react\";\nimport './style.css';\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Autocomplete extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n\n    this.onChange = e => {\n      console.log('onChanges');\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestionName => suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          class: \"suggestions\",\n          children: filteredSuggestions.map((suggestionName, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestionName\n            }, suggestionName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this);\n      } else {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"no-suggestions\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"No suggestions, you're on your own!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), suggestionsListComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/Venotance/react/new folder/1/carsharing/src/components/Content/OrderPage/Autocomplete.jsx"],"names":["React","Component","Fragment","PropTypes","Autocomplete","state","activeSuggestion","filteredSuggestions","showSuggestions","userInput","onChange","e","console","log","suggestions","props","currentTarget","value","filter","suggestionName","toLowerCase","indexOf","setState","onClick","innerText","onKeyDown","keyCode","length","render","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","isRequired"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAOjCI,KAPiC,GAOzB;AACJ;AACAC,MAAAA,gBAAgB,EAAE,CAFd;AAGJ;AACAC,MAAAA,mBAAmB,EAAE,EAJjB;AAKJ;AACAC,MAAAA,eAAe,EAAE,KANb;AAOJ;AACAC,MAAAA,SAAS,EAAE;AARP,KAPyB;;AAAA,SAmBjCC,QAnBiC,GAmBrBC,CAAD,IAAO;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAkB,KAAKC,KAA7B;AACA,YAAMN,SAAS,GAAGE,CAAC,CAACK,aAAF,CAAgBC,KAAlC,CAJc,CAMd;;AACA,YAAMV,mBAAmB,GAAGO,WAAW,CAACI,MAAZ,CACvBC,cAAD,IACIA,cAAc,CAACC,WAAf,GAA6BC,OAA7B,CAAqCZ,SAAS,CAACW,WAAV,EAArC,IAAgE,CAAC,CAF7C,CAA5B;AAKA,WAAKE,QAAL,CAAc;AACVhB,Q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","sourcesContent":["// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import './style.css'\r\n\r\n// export class Autocomplete extends Component {\r\n//   static propTypes = {\r\n//     options: PropTypes.instanceOf(Array).isRequired\r\n//   };\r\n//   state = {\r\n//     activeOption: 0,\r\n//     filteredOptions: [],\r\n//     showOptions: false,\r\n//     userInput: ''\r\n//   };\r\n\r\n//   onChange = (e) => {\r\n//     console.log('onChanges');\r\n\r\n//     const { options } = this.props;\r\n//     const userInput = e.currentTarget.value;\r\n\r\n//     const filteredOptions = options.filter(\r\n//       (optionName) =>\r\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n//     );\r\n\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions,\r\n//       showOptions: true,\r\n//       userInput: e.currentTarget.value\r\n//     });\r\n//   };\r\n\r\n//   onClick = (e) => {\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions: [],\r\n//       showOptions: false,\r\n//       userInput: e.currentTarget.innerText\r\n//     });\r\n//   };\r\n//   onKeyDown = (e) => {\r\n//     const { activeOption, filteredOptions } = this.state;\r\n\r\n//     if (e.keyCode === 13) {\r\n//       this.setState({\r\n//         activeOption: 0,\r\n//         showOptions: false,\r\n//         userInput: filteredOptions[activeOption]\r\n//       });\r\n//     } else if (e.keyCode === 38) {\r\n//       if (activeOption === 0) {\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption - 1 });\r\n//     } else if (e.keyCode === 40) {\r\n//       if (activeOption === filteredOptions.length - 1) {\r\n//         console.log(activeOption);\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption + 1 });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const {\r\n//       onChange,\r\n//       onClick,\r\n//       onKeyDown,\r\n\r\n//       state: { activeOption, filteredOptions, showOptions, userInput }\r\n//     } = this;\r\n//     let optionList;\r\n//     if (showOptions && userInput) {\r\n//       if (filteredOptions.length) {\r\n//         optionList = (\r\n//           <ul className=\"options\">\r\n//             {filteredOptions.map((optionName, index) => {\r\n//               let className;\r\n//               if (index === activeOption) {\r\n//                 className = 'option-active';\r\n//               }\r\n//               return (\r\n//                 <li className={className} key={optionName} onClick={onClick}>\r\n//                   {optionName}\r\n//                 </li>\r\n//               );\r\n//             })}\r\n//           </ul>\r\n//         );\r\n//       } else {\r\n//         optionList = (\r\n//           <div className=\"no-options\">\r\n//             <em>No Option!</em>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n//     return (\r\n//       <React.Fragment>\r\n//         <div className=\"search\">\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"search-box\"\r\n//             onChange={onChange}\r\n//             onKeyDown={onKeyDown}\r\n//             value={userInput}\r\n//           />\r\n//           <input type=\"submit\" value=\"\" className=\"search-btn\" />\r\n//         </div>\r\n//         {optionList}\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Autocomplete;\r\n\r\nimport React, { Component, Fragment } from \"react\";\r\nimport './style.css'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired\r\n    };\r\n\r\n\r\n\r\n    state = {\r\n        // The active selection's index\r\n        activeSuggestion: 0,\r\n        // The suggestions that match the user's input\r\n        filteredSuggestions: [],\r\n        // Whether or not the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        userInput: \"\"\r\n    };\r\n\r\n\r\n    onChange = (e) => {\r\n        console.log('onChanges');\r\n\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            (suggestionName) =>\r\n                suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onClick = (e) => {\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: e.currentTarget.innerText\r\n        });\r\n    };\r\n\r\n    onKeyDown = (e) => {\r\n        const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n        // User pressed the enter key\r\n        if (e.keyCode === 13) {\r\n            this.setState({\r\n                activeSuggestion: 0,\r\n                showSuggestions: false,\r\n                userInput: filteredSuggestions[activeSuggestion]\r\n            });\r\n        }\r\n        // User pressed the up arrow\r\n        else if (e.keyCode === 38) {\r\n            if (activeSuggestion === 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        }\r\n        // User pressed the down arrow\r\n        else if (e.keyCode === 40) {\r\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            onKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul class=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestionName, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                                <li className={className} key={suggestionName} onClick={onClick}>\r\n                                    {suggestionName}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div class=\"no-suggestions\">\r\n                        <em>No suggestions, you're on your own!</em>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={onChange}\r\n                    onKeyDown={onKeyDown}\r\n                    value={userInput}\r\n                />\r\n                {suggestionsListComponent}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}