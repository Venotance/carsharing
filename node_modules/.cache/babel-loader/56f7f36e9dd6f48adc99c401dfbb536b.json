{"ast":null,"code":"import _classCallCheck from\"D:/Program Files (x86)/React/new folder/1/carsharing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"D:/Program Files (x86)/React/new folder/1/carsharing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"D:/Program Files (x86)/React/new folder/1/carsharing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"D:/Program Files (x86)/React/new folder/1/carsharing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import ob from'./Autocomplete.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Autocomplete=/*#__PURE__*/function(_Component){_inherits(Autocomplete,_Component);var _super=_createSuper(Autocomplete);function Autocomplete(){var _this;_classCallCheck(this,Autocomplete);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={activeOption:0,filteredOptions:[],showOptions:false,userInput:''};_this.onChange=function(e){console.log('onChanges');var options=_this.props.options;var userInput=e.currentTarget.value;var filteredOptions=options.filter(function(optionName){return optionName.toLowerCase().indexOf(userInput.toLowerCase())>-1;});_this.setState({activeOption:0,filteredOptions:filteredOptions,showOptions:true,userInput:e.currentTarget.value});};_this.onClick=function(e){_this.setState({activeOption:0,filteredOptions:[],showOptions:false,userInput:e.currentTarget.innerText});_this.props.updateData(e.currentTarget.innerText);};_this.onKeyDown=function(e){var _this$state=_this.state,activeOption=_this$state.activeOption,filteredOptions=_this$state.filteredOptions;if(e.keyCode===13){_this.setState({activeOption:0,showOptions:false,userInput:filteredOptions[activeOption]});_this.props.updateData(_this.state.filteredOptions[activeOption]);}else if(e.keyCode===38){if(activeOption===0){return;}_this.setState({activeOption:activeOption-1});}else if(e.keyCode===40){if(activeOption===filteredOptions.length-1){console.log(activeOption);return;}_this.setState({activeOption:activeOption+1});}};return _this;}_createClass(Autocomplete,[{key:\"render\",value:function render(){var onChange=this.onChange,onClick=this.onClick,onKeyDown=this.onKeyDown,_this$state2=this.state,activeOption=_this$state2.activeOption,filteredOptions=_this$state2.filteredOptions,showOptions=_this$state2.showOptions,userInput=_this$state2.userInput;var optionList;if(showOptions&&userInput){if(filteredOptions.length){optionList=/*#__PURE__*/_jsx(\"ul\",{className:ob.options,children:filteredOptions.map(function(optionName,index){var className;if(index===activeOption){className=ob.option_active;}return/*#__PURE__*/_jsx(\"li\",{className:className,onClick:onClick,children:optionName},optionName);})});}else{optionList=/*#__PURE__*/_jsx(\"div\",{className:ob.no_options,children:/*#__PURE__*/_jsx(\"em\",{children:\"\\u041E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0432 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0435  :(\"})});}}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"search\",children:/*#__PURE__*/_jsx(\"input\",{type:\"search\",placeholder:this.props.placehold,className:ob.input,onChange:onChange,onKeyDown:onKeyDown,value:userInput})}),optionList]});}}]);return Autocomplete;}(Component);export default Autocomplete;// import React, { Component, Fragment } from \"react\";\n// import './style.css'\n// import PropTypes from \"prop-types\";\n// export class Autocomplete extends Component {\n//     static propTypes = {\n//         suggestions: PropTypes.instanceOf(Array).isRequired\n//     };\n//     state = {\n//         // The active selection's index\n//         activeSuggestion: 0,\n//         // The suggestions that match the user's input\n//         filteredSuggestions: [],\n//         // Whether or not the suggestion list is shown\n//         showSuggestions: false,\n//         // What the user has entered\n//         userInput: \"\"\n//     };\n//     onChange = (e) => {\n//         console.log('onChanges');\n//         const { suggestions } = this.props;\n//         const userInput = e.currentTarget.value;\n//         // Filter our suggestions that don't contain the user's input\n//         const filteredSuggestions = suggestions.filter(\n//             (suggestionName) =>\n//                 suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n//         );\n//         this.setState({\n//             activeSuggestion: 0,\n//             filteredSuggestions,\n//             showSuggestions: true,\n//             userInput: e.currentTarget.value\n//         });\n//     };\n//     onClick = (e) => {\n//         this.setState({\n//             activeSuggestion: 0,\n//             filteredSuggestions: [],\n//             showSuggestions: false,\n//             userInput: e.currentTarget.innerText\n//         });\n//     };\n//     onKeyDown = (e) => {\n//         const { activeSuggestion, filteredSuggestions } = this.state;\n//         // User pressed the enter key\n//         if (e.keyCode === 13) {\n//             this.setState({\n//                 activeSuggestion: 0,\n//                 showSuggestions: false,\n//                 userInput: filteredSuggestions[activeSuggestion]\n//             });\n//         }\n//         // User pressed the up arrow\n//         else if (e.keyCode === 38) {\n//             if (activeSuggestion === 0) {\n//                 return;\n//             }\n//             this.setState({ activeSuggestion: activeSuggestion - 1 });\n//         }\n//         // User pressed the down arrow\n//         else if (e.keyCode === 40) {\n//             if (activeSuggestion - 1 === filteredSuggestions.length) {\n//                 return;\n//             }\n//             this.setState({ activeSuggestion: activeSuggestion + 1 });\n//         }\n//     };\n//     render() {\n//         const {\n//             onChange,\n//             onClick,\n//             onKeyDown,\n//             state: {\n//                 activeSuggestion,\n//                 filteredSuggestions,\n//                 showSuggestions,\n//                 userInput\n//             }\n//         } = this;\n//         let suggestionsListComponent;\n//         if (showSuggestions && userInput) {\n//             if (filteredSuggestions.length) {\n//                 suggestionsListComponent = (\n//                     <ul class=\"suggestions\">\n//                         {filteredSuggestions.map((suggestionName, index) => {\n//                             let className;\n//                             // Flag the active suggestion with a class\n//                             if (index === activeSuggestion) {\n//                                 className = \"suggestion-active\";\n//                             }\n//                             return (\n//                                 <li className={className} key={suggestionName} onClick={onClick}>\n//                                     {suggestionName}\n//                                 </li>\n//                             );\n//                         })}\n//                     </ul>\n//                 );\n//             } else {\n//                 suggestionsListComponent = (\n//                     <div class=\"no-suggestions\">\n//                         <em>No suggestions, you're on your own!</em>\n//                     </div>\n//                 );\n//             }\n//         }\n//         return (\n//             <React.Fragment>\n//                 <input\n//                     type=\"text\"\n//                     onChange={onChange}\n//                     onKeyDown={onKeyDown}\n//                     value={userInput}\n//                 />\n//                 {suggestionsListComponent}\n//             </React.Fragment>\n//         );\n//     }\n// }\n// export default Autocomplete;","map":{"version":3,"sources":["D:/Program Files (x86)/React/new folder/1/carsharing/src/components/Content/OrderPage/Autocomplete.jsx"],"names":["React","Component","ob","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","console","log","options","props","currentTarget","value","filter","optionName","toLowerCase","indexOf","setState","onClick","innerText","updateData","onKeyDown","keyCode","length","optionList","map","index","className","option_active","no_options","placehold","input"],"mappings":"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":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ob from './Autocomplete.module.css'\r\n\r\nexport class Autocomplete extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.instanceOf(Array).isRequired\r\n  };\r\n  state = {\r\n    activeOption: 0,\r\n    filteredOptions: [],\r\n    showOptions: false,\r\n    userInput: ''\r\n  };\r\n\r\n  \r\n\r\n  onChange = (e) => {\r\n    console.log('onChanges');\r\n\r\n    const { options } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredOptions = options.filter(\r\n      (optionName) =>\r\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions,\r\n      showOptions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions: [],\r\n      showOptions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n    this.props.updateData(e.currentTarget.innerText)\r\n  };\r\n  onKeyDown = (e) => {\r\n    const { activeOption, filteredOptions } = this.state;\r\n\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeOption: 0,\r\n        showOptions: false,\r\n        userInput: filteredOptions[activeOption]\r\n      });\r\n      this.props.updateData(this.state.filteredOptions[activeOption])\r\n    } else if (e.keyCode === 38) {\r\n      if (activeOption === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption - 1 });\r\n    } else if (e.keyCode === 40) {\r\n      if (activeOption === filteredOptions.length - 1) {\r\n        console.log(activeOption);\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n\r\n      state: { activeOption, filteredOptions, showOptions, userInput }\r\n    } = this;\r\n    let optionList;\r\n    if (showOptions && userInput) {\r\n      if (filteredOptions.length) {\r\n        optionList = (\r\n          <ul className={ob.options}>\r\n            {filteredOptions.map((optionName, index) => {\r\n              let className;\r\n              if (index === activeOption) {\r\n\r\n                className = ob.option_active;\r\n              }\r\n              return (\r\n                <li className={className} key={optionName} onClick={onClick}>\r\n                  {optionName}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className={ob.no_options}>\r\n            <em>Отсутствует в списке  :(</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder={this.props.placehold}\r\n            className={ob.input}\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={userInput}\r\n          />\r\n        </div>\r\n        {optionList}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n\r\n// import React, { Component, Fragment } from \"react\";\r\n// import './style.css'\r\n// import PropTypes from \"prop-types\";\r\n\r\n// export class Autocomplete extends Component {\r\n//     static propTypes = {\r\n//         suggestions: PropTypes.instanceOf(Array).isRequired\r\n//     };\r\n\r\n\r\n\r\n//     state = {\r\n//         // The active selection's index\r\n//         activeSuggestion: 0,\r\n//         // The suggestions that match the user's input\r\n//         filteredSuggestions: [],\r\n//         // Whether or not the suggestion list is shown\r\n//         showSuggestions: false,\r\n//         // What the user has entered\r\n//         userInput: \"\"\r\n//     };\r\n\r\n\r\n//     onChange = (e) => {\r\n//         console.log('onChanges');\r\n\r\n//         const { suggestions } = this.props;\r\n//         const userInput = e.currentTarget.value;\r\n\r\n//         // Filter our suggestions that don't contain the user's input\r\n//         const filteredSuggestions = suggestions.filter(\r\n//             (suggestionName) =>\r\n//                 suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n//         );\r\n\r\n//         this.setState({\r\n//             activeSuggestion: 0,\r\n//             filteredSuggestions,\r\n//             showSuggestions: true,\r\n//             userInput: e.currentTarget.value\r\n//         });\r\n//     };\r\n\r\n//     onClick = (e) => {\r\n//         this.setState({\r\n//             activeSuggestion: 0,\r\n//             filteredSuggestions: [],\r\n//             showSuggestions: false,\r\n//             userInput: e.currentTarget.innerText\r\n//         });\r\n//     };\r\n\r\n//     onKeyDown = (e) => {\r\n//         const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n//         // User pressed the enter key\r\n//         if (e.keyCode === 13) {\r\n//             this.setState({\r\n//                 activeSuggestion: 0,\r\n//                 showSuggestions: false,\r\n//                 userInput: filteredSuggestions[activeSuggestion]\r\n//             });\r\n//         }\r\n//         // User pressed the up arrow\r\n//         else if (e.keyCode === 38) {\r\n//             if (activeSuggestion === 0) {\r\n//                 return;\r\n//             }\r\n\r\n//             this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n//         }\r\n//         // User pressed the down arrow\r\n//         else if (e.keyCode === 40) {\r\n//             if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n//                 return;\r\n//             }\r\n\r\n//             this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n//         }\r\n//     };\r\n\r\n//     render() {\r\n//         const {\r\n//             onChange,\r\n//             onClick,\r\n//             onKeyDown,\r\n//             state: {\r\n//                 activeSuggestion,\r\n//                 filteredSuggestions,\r\n//                 showSuggestions,\r\n//                 userInput\r\n//             }\r\n//         } = this;\r\n\r\n//         let suggestionsListComponent;\r\n\r\n//         if (showSuggestions && userInput) {\r\n//             if (filteredSuggestions.length) {\r\n//                 suggestionsListComponent = (\r\n//                     <ul class=\"suggestions\">\r\n//                         {filteredSuggestions.map((suggestionName, index) => {\r\n//                             let className;\r\n\r\n//                             // Flag the active suggestion with a class\r\n//                             if (index === activeSuggestion) {\r\n//                                 className = \"suggestion-active\";\r\n//                             }\r\n\r\n//                             return (\r\n//                                 <li className={className} key={suggestionName} onClick={onClick}>\r\n//                                     {suggestionName}\r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 );\r\n//             } else {\r\n//                 suggestionsListComponent = (\r\n//                     <div class=\"no-suggestions\">\r\n//                         <em>No suggestions, you're on your own!</em>\r\n//                     </div>\r\n//                 );\r\n//             }\r\n//         }\r\n\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     onChange={onChange}\r\n//                     onKeyDown={onKeyDown}\r\n//                     value={userInput}\r\n//                 />\r\n//                 {suggestionsListComponent}\r\n//             </React.Fragment>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}