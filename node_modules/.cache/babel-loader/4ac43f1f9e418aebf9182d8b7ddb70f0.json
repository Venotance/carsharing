{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Venotance\\\\react\\\\new folder\\\\1\\\\carsharing\\\\src\\\\components\\\\Content\\\\OrderPage\\\\Autocomplete.jsx\";\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import './style.css'\n// export class Autocomplete extends Component {\n//   static propTypes = {\n//     options: PropTypes.instanceOf(Array).isRequired\n//   };\n//   state = {\n//     activeOption: 0,\n//     filteredOptions: [],\n//     showOptions: false,\n//     userInput: ''\n//   };\n//   onChange = (e) => {\n//     console.log('onChanges');\n//     const { options } = this.props;\n//     const userInput = e.currentTarget.value;\n//     const filteredOptions = options.filter(\n//       (optionName) =>\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n//     );\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions,\n//       showOptions: true,\n//       userInput: e.currentTarget.value\n//     });\n//   };\n//   onClick = (e) => {\n//     this.setState({\n//       activeOption: 0,\n//       filteredOptions: [],\n//       showOptions: false,\n//       userInput: e.currentTarget.innerText\n//     });\n//   };\n//   onKeyDown = (e) => {\n//     const { activeOption, filteredOptions } = this.state;\n//     if (e.keyCode === 13) {\n//       this.setState({\n//         activeOption: 0,\n//         showOptions: false,\n//         userInput: filteredOptions[activeOption]\n//       });\n//     } else if (e.keyCode === 38) {\n//       if (activeOption === 0) {\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption - 1 });\n//     } else if (e.keyCode === 40) {\n//       if (activeOption === filteredOptions.length - 1) {\n//         console.log(activeOption);\n//         return;\n//       }\n//       this.setState({ activeOption: activeOption + 1 });\n//     }\n//   };\n//   render() {\n//     const {\n//       onChange,\n//       onClick,\n//       onKeyDown,\n//       state: { activeOption, filteredOptions, showOptions, userInput }\n//     } = this;\n//     let optionList;\n//     if (showOptions && userInput) {\n//       if (filteredOptions.length) {\n//         optionList = (\n//           <ul className=\"options\">\n//             {filteredOptions.map((optionName, index) => {\n//               let className;\n//               if (index === activeOption) {\n//                 className = 'option-active';\n//               }\n//               return (\n//                 <li className={className} key={optionName} onClick={onClick}>\n//                   {optionName}\n//                 </li>\n//               );\n//             })}\n//           </ul>\n//         );\n//       } else {\n//         optionList = (\n//           <div className=\"no-options\">\n//             <em>No Option!</em>\n//           </div>\n//         );\n//       }\n//     }\n//     return (\n//       <React.Fragment>\n//         <div className=\"search\">\n//           <input\n//             type=\"text\"\n//             className=\"search-box\"\n//             onChange={onChange}\n//             onKeyDown={onKeyDown}\n//             value={userInput}\n//           />\n//           <input type=\"submit\" value=\"\" className=\"search-btn\" />\n//         </div>\n//         {optionList}\n//       </React.Fragment>\n//     );\n//   }\n// }\n// export default Autocomplete;\nimport React, { Component, Fragment } from \"react\";\nimport './style.css';\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          class: \"suggestions\",\n          children: filteredSuggestions.map((suggestion, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this);\n      } else {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"no-suggestions\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"No suggestions, you're on your own!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), suggestionsListComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/Venotance/react/new folder/1/carsharing/src/components/Content/OrderPage/Autocomplete.jsx"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","render","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"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","sourcesContent":["// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import './style.css'\r\n\r\n// export class Autocomplete extends Component {\r\n//   static propTypes = {\r\n//     options: PropTypes.instanceOf(Array).isRequired\r\n//   };\r\n//   state = {\r\n//     activeOption: 0,\r\n//     filteredOptions: [],\r\n//     showOptions: false,\r\n//     userInput: ''\r\n//   };\r\n\r\n//   onChange = (e) => {\r\n//     console.log('onChanges');\r\n\r\n//     const { options } = this.props;\r\n//     const userInput = e.currentTarget.value;\r\n\r\n//     const filteredOptions = options.filter(\r\n//       (optionName) =>\r\n//         optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n//     );\r\n\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions,\r\n//       showOptions: true,\r\n//       userInput: e.currentTarget.value\r\n//     });\r\n//   };\r\n\r\n//   onClick = (e) => {\r\n//     this.setState({\r\n//       activeOption: 0,\r\n//       filteredOptions: [],\r\n//       showOptions: false,\r\n//       userInput: e.currentTarget.innerText\r\n//     });\r\n//   };\r\n//   onKeyDown = (e) => {\r\n//     const { activeOption, filteredOptions } = this.state;\r\n\r\n//     if (e.keyCode === 13) {\r\n//       this.setState({\r\n//         activeOption: 0,\r\n//         showOptions: false,\r\n//         userInput: filteredOptions[activeOption]\r\n//       });\r\n//     } else if (e.keyCode === 38) {\r\n//       if (activeOption === 0) {\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption - 1 });\r\n//     } else if (e.keyCode === 40) {\r\n//       if (activeOption === filteredOptions.length - 1) {\r\n//         console.log(activeOption);\r\n//         return;\r\n//       }\r\n//       this.setState({ activeOption: activeOption + 1 });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const {\r\n//       onChange,\r\n//       onClick,\r\n//       onKeyDown,\r\n\r\n//       state: { activeOption, filteredOptions, showOptions, userInput }\r\n//     } = this;\r\n//     let optionList;\r\n//     if (showOptions && userInput) {\r\n//       if (filteredOptions.length) {\r\n//         optionList = (\r\n//           <ul className=\"options\">\r\n//             {filteredOptions.map((optionName, index) => {\r\n//               let className;\r\n//               if (index === activeOption) {\r\n//                 className = 'option-active';\r\n//               }\r\n//               return (\r\n//                 <li className={className} key={optionName} onClick={onClick}>\r\n//                   {optionName}\r\n//                 </li>\r\n//               );\r\n//             })}\r\n//           </ul>\r\n//         );\r\n//       } else {\r\n//         optionList = (\r\n//           <div className=\"no-options\">\r\n//             <em>No Option!</em>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n//     return (\r\n//       <React.Fragment>\r\n//         <div className=\"search\">\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"search-box\"\r\n//             onChange={onChange}\r\n//             onKeyDown={onKeyDown}\r\n//             value={userInput}\r\n//           />\r\n//           <input type=\"submit\" value=\"\" className=\"search-btn\" />\r\n//         </div>\r\n//         {optionList}\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Autocomplete;\r\n\r\nimport React, { Component, Fragment } from \"react\";\r\nimport './style.css'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array)\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\"\r\n    };\r\n  }\r\n\r\n  onChange = e => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onClick = e => {\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n\r\n  onKeyDown = e => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: filteredSuggestions[activeSuggestion]\r\n      });\r\n    }\r\n    // User pressed the up arrow\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput\r\n      }\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul class=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li className={className} key={suggestion} onClick={onClick}>\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        suggestionsListComponent = (\r\n          <div class=\"no-suggestions\">\r\n            <em>No suggestions, you're on your own!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}