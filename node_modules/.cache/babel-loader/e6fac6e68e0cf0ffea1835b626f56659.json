{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Venotance\\\\react\\\\new folder\\\\1\\\\carsharing\\\\src\\\\components\\\\Content\\\\OrderPage\\\\Autocomplete.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ob from './Autocomplete.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Autocomplete extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: '',\n      name: 'Бумеранг вернулся назад'\n    };\n\n    this.onChange = e => {\n      console.log('onChanges');\n      const {\n        options\n      } = this.props;\n      const userInput = e.currentTarget.value;\n      const filteredOptions = options.filter(optionName => optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeOption: 0,\n        filteredOptions,\n        showOptions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeOption: 0,\n        filteredOptions: [],\n        showOptions: false,\n        userInput: e.currentTarget.innerText\n      });\n      this.props.updateData(this.state.name);\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeOption,\n        filteredOptions\n      } = this.state;\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeOption: 0,\n          showOptions: false,\n          userInput: filteredOptions[activeOption]\n        });\n        console.log(this.setState);\n      } else if (e.keyCode === 38) {\n        if (activeOption === 0) {\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption - 1\n        });\n      } else if (e.keyCode === 40) {\n        if (activeOption === filteredOptions.length - 1) {\n          console.log(activeOption);\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption + 1\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n    let optionList;\n\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: ob.options,\n          children: filteredOptions.map((optionName, index) => {\n            let className;\n\n            if (index === activeOption) {\n              className = ob.option_active;\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: optionName\n            }, optionName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this);\n      } else {\n        optionList = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: ob.no_options,\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"\\u041E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0432 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0435  :(\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          placeholder: this.props.placehold,\n          className: ob.input,\n          onChange: onChange,\n          onKeyDown: onKeyDown,\n          value: userInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.updateData(this.state.name);\n          },\n          children: \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0431\\u0443\\u043C\\u0435\\u0440\\u0430\\u043D\\u0433\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), optionList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nAutocomplete.propTypes = {\n  options: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete; // import React, { Component, Fragment } from \"react\";\n// import './style.css'\n// import PropTypes from \"prop-types\";\n// export class Autocomplete extends Component {\n//     static propTypes = {\n//         suggestions: PropTypes.instanceOf(Array).isRequired\n//     };\n//     state = {\n//         // The active selection's index\n//         activeSuggestion: 0,\n//         // The suggestions that match the user's input\n//         filteredSuggestions: [],\n//         // Whether or not the suggestion list is shown\n//         showSuggestions: false,\n//         // What the user has entered\n//         userInput: \"\"\n//     };\n//     onChange = (e) => {\n//         console.log('onChanges');\n//         const { suggestions } = this.props;\n//         const userInput = e.currentTarget.value;\n//         // Filter our suggestions that don't contain the user's input\n//         const filteredSuggestions = suggestions.filter(\n//             (suggestionName) =>\n//                 suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n//         );\n//         this.setState({\n//             activeSuggestion: 0,\n//             filteredSuggestions,\n//             showSuggestions: true,\n//             userInput: e.currentTarget.value\n//         });\n//     };\n//     onClick = (e) => {\n//         this.setState({\n//             activeSuggestion: 0,\n//             filteredSuggestions: [],\n//             showSuggestions: false,\n//             userInput: e.currentTarget.innerText\n//         });\n//     };\n//     onKeyDown = (e) => {\n//         const { activeSuggestion, filteredSuggestions } = this.state;\n//         // User pressed the enter key\n//         if (e.keyCode === 13) {\n//             this.setState({\n//                 activeSuggestion: 0,\n//                 showSuggestions: false,\n//                 userInput: filteredSuggestions[activeSuggestion]\n//             });\n//         }\n//         // User pressed the up arrow\n//         else if (e.keyCode === 38) {\n//             if (activeSuggestion === 0) {\n//                 return;\n//             }\n//             this.setState({ activeSuggestion: activeSuggestion - 1 });\n//         }\n//         // User pressed the down arrow\n//         else if (e.keyCode === 40) {\n//             if (activeSuggestion - 1 === filteredSuggestions.length) {\n//                 return;\n//             }\n//             this.setState({ activeSuggestion: activeSuggestion + 1 });\n//         }\n//     };\n//     render() {\n//         const {\n//             onChange,\n//             onClick,\n//             onKeyDown,\n//             state: {\n//                 activeSuggestion,\n//                 filteredSuggestions,\n//                 showSuggestions,\n//                 userInput\n//             }\n//         } = this;\n//         let suggestionsListComponent;\n//         if (showSuggestions && userInput) {\n//             if (filteredSuggestions.length) {\n//                 suggestionsListComponent = (\n//                     <ul class=\"suggestions\">\n//                         {filteredSuggestions.map((suggestionName, index) => {\n//                             let className;\n//                             // Flag the active suggestion with a class\n//                             if (index === activeSuggestion) {\n//                                 className = \"suggestion-active\";\n//                             }\n//                             return (\n//                                 <li className={className} key={suggestionName} onClick={onClick}>\n//                                     {suggestionName}\n//                                 </li>\n//                             );\n//                         })}\n//                     </ul>\n//                 );\n//             } else {\n//                 suggestionsListComponent = (\n//                     <div class=\"no-suggestions\">\n//                         <em>No suggestions, you're on your own!</em>\n//                     </div>\n//                 );\n//             }\n//         }\n//         return (\n//             <React.Fragment>\n//                 <input\n//                     type=\"text\"\n//                     onChange={onChange}\n//                     onKeyDown={onKeyDown}\n//                     value={userInput}\n//                 />\n//                 {suggestionsListComponent}\n//             </React.Fragment>\n//         );\n//     }\n// }\n// export default Autocomplete;","map":{"version":3,"sources":["C:/Users/Venotance/react/new folder/1/carsharing/src/components/Content/OrderPage/Autocomplete.jsx"],"names":["React","Component","PropTypes","ob","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","name","onChange","e","console","log","options","props","currentTarget","value","filter","optionName","toLowerCase","indexOf","setState","onClick","innerText","updateData","onKeyDown","keyCode","length","render","optionList","map","index","className","option_active","no_options","placehold","input","propTypes","instanceOf","Array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ob from './Autocomplete.module.css'\r\n\r\nexport class Autocomplete extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.instanceOf(Array).isRequired\r\n  };\r\n  state = {\r\n    activeOption: 0,\r\n    filteredOptions: [],\r\n    showOptions: false,\r\n    userInput: '',\r\n    name: 'Бумеранг вернулся назад'\r\n  };\r\n\r\n  \r\n\r\n  onChange = (e) => {\r\n    console.log('onChanges');\r\n\r\n    const { options } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredOptions = options.filter(\r\n      (optionName) =>\r\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions,\r\n      showOptions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions: [],\r\n      showOptions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n    this.props.updateData(this.state.name)\r\n  };\r\n  onKeyDown = (e) => {\r\n    const { activeOption, filteredOptions } = this.state;\r\n\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeOption: 0,\r\n        showOptions: false,\r\n        userInput: filteredOptions[activeOption]\r\n      });\r\n      console.log(this.setState);\r\n    } else if (e.keyCode === 38) {\r\n      if (activeOption === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption - 1 });\r\n    } else if (e.keyCode === 40) {\r\n      if (activeOption === filteredOptions.length - 1) {\r\n        console.log(activeOption);\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n\r\n      state: { activeOption, filteredOptions, showOptions, userInput }\r\n    } = this;\r\n    let optionList;\r\n    if (showOptions && userInput) {\r\n      if (filteredOptions.length) {\r\n        optionList = (\r\n          <ul className={ob.options}>\r\n            {filteredOptions.map((optionName, index) => {\r\n              let className;\r\n              if (index === activeOption) {\r\n\r\n                className = ob.option_active;\r\n              }\r\n              return (\r\n                <li className={className} key={optionName} onClick={onClick}>\r\n                  {optionName}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className={ob.no_options}>\r\n            <em>Отсутствует в списке  :(</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder={this.props.placehold}\r\n            className={ob.input}\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={userInput}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={() => { this.props.updateData(this.state.name) }}>Запустить бумеранг</button>\r\n        </div>\r\n        {optionList}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n\r\n// import React, { Component, Fragment } from \"react\";\r\n// import './style.css'\r\n// import PropTypes from \"prop-types\";\r\n\r\n// export class Autocomplete extends Component {\r\n//     static propTypes = {\r\n//         suggestions: PropTypes.instanceOf(Array).isRequired\r\n//     };\r\n\r\n\r\n\r\n//     state = {\r\n//         // The active selection's index\r\n//         activeSuggestion: 0,\r\n//         // The suggestions that match the user's input\r\n//         filteredSuggestions: [],\r\n//         // Whether or not the suggestion list is shown\r\n//         showSuggestions: false,\r\n//         // What the user has entered\r\n//         userInput: \"\"\r\n//     };\r\n\r\n\r\n//     onChange = (e) => {\r\n//         console.log('onChanges');\r\n\r\n//         const { suggestions } = this.props;\r\n//         const userInput = e.currentTarget.value;\r\n\r\n//         // Filter our suggestions that don't contain the user's input\r\n//         const filteredSuggestions = suggestions.filter(\r\n//             (suggestionName) =>\r\n//                 suggestionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n//         );\r\n\r\n//         this.setState({\r\n//             activeSuggestion: 0,\r\n//             filteredSuggestions,\r\n//             showSuggestions: true,\r\n//             userInput: e.currentTarget.value\r\n//         });\r\n//     };\r\n\r\n//     onClick = (e) => {\r\n//         this.setState({\r\n//             activeSuggestion: 0,\r\n//             filteredSuggestions: [],\r\n//             showSuggestions: false,\r\n//             userInput: e.currentTarget.innerText\r\n//         });\r\n//     };\r\n\r\n//     onKeyDown = (e) => {\r\n//         const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n//         // User pressed the enter key\r\n//         if (e.keyCode === 13) {\r\n//             this.setState({\r\n//                 activeSuggestion: 0,\r\n//                 showSuggestions: false,\r\n//                 userInput: filteredSuggestions[activeSuggestion]\r\n//             });\r\n//         }\r\n//         // User pressed the up arrow\r\n//         else if (e.keyCode === 38) {\r\n//             if (activeSuggestion === 0) {\r\n//                 return;\r\n//             }\r\n\r\n//             this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n//         }\r\n//         // User pressed the down arrow\r\n//         else if (e.keyCode === 40) {\r\n//             if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n//                 return;\r\n//             }\r\n\r\n//             this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n//         }\r\n//     };\r\n\r\n//     render() {\r\n//         const {\r\n//             onChange,\r\n//             onClick,\r\n//             onKeyDown,\r\n//             state: {\r\n//                 activeSuggestion,\r\n//                 filteredSuggestions,\r\n//                 showSuggestions,\r\n//                 userInput\r\n//             }\r\n//         } = this;\r\n\r\n//         let suggestionsListComponent;\r\n\r\n//         if (showSuggestions && userInput) {\r\n//             if (filteredSuggestions.length) {\r\n//                 suggestionsListComponent = (\r\n//                     <ul class=\"suggestions\">\r\n//                         {filteredSuggestions.map((suggestionName, index) => {\r\n//                             let className;\r\n\r\n//                             // Flag the active suggestion with a class\r\n//                             if (index === activeSuggestion) {\r\n//                                 className = \"suggestion-active\";\r\n//                             }\r\n\r\n//                             return (\r\n//                                 <li className={className} key={suggestionName} onClick={onClick}>\r\n//                                     {suggestionName}\r\n//                                 </li>\r\n//                             );\r\n//                         })}\r\n//                     </ul>\r\n//                 );\r\n//             } else {\r\n//                 suggestionsListComponent = (\r\n//                     <div class=\"no-suggestions\">\r\n//                         <em>No suggestions, you're on your own!</em>\r\n//                     </div>\r\n//                 );\r\n//             }\r\n//         }\r\n\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     onChange={onChange}\r\n//                     onKeyDown={onKeyDown}\r\n//                     value={userInput}\r\n//                 />\r\n//                 {suggestionsListComponent}\r\n//             </React.Fragment>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}